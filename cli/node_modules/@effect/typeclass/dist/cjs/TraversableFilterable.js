"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traversePartitionMap = exports.traversePartition = exports.traverseFilterMap = exports.traverseFilter = void 0;
var E = _interopRequireWildcard(require("effect/Either"));
var _Function = require("effect/Function");
var O = _interopRequireWildcard(require("effect/Option"));
var filterable = _interopRequireWildcard(require("./Filterable.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Returns a default binary `traversePartitionMap` implementation.
 *
 * @since 0.24.0
 */
const traversePartitionMap = T => F => (self, f) => F.map(T.traverse(F)(self, f), filterable.separate(T));
/**
 * Returns a default binary `traverseFilterMap` implementation.
 *
 * @since 0.24.0
 */
exports.traversePartitionMap = traversePartitionMap;
const traverseFilterMap = T => F => (self, f) => F.map(T.traverse(F)(self, f), filterable.compact(T));
/**
 * @since 0.24.0
 */
exports.traverseFilterMap = traverseFilterMap;
const traverseFilter = T => F => (0, _Function.dual)(2, (self, predicate) => T.traverseFilterMap(F)(self, b => F.map(predicate(b), keep => keep ? O.some(b) : O.none())));
/**
 * @since 0.24.0
 */
exports.traverseFilter = traverseFilter;
const traversePartition = T => F => (0, _Function.dual)(2, (self, predicate) => T.traversePartitionMap(F)(self, b => F.map(predicate(b), keep => keep ? E.right(b) : E.left(b))));
exports.traversePartition = traversePartition;
//# sourceMappingURL=TraversableFilterable.js.map