"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separate = exports.partitionMapComposition = exports.partition = exports.filterMapComposition = exports.filter = exports.compact = void 0;
var Either = _interopRequireWildcard(require("effect/Either"));
var _Function = require("effect/Function");
var Option = _interopRequireWildcard(require("effect/Option"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * `Filterable` represents data structures which can be _partitioned_/_filtered_.
 *
 * @since 0.24.0
 */

/**
 * Returns a default binary `partitionMap` composition.
 *
 * @since 0.24.0
 */
const partitionMapComposition = (F, G) => (self, f) => {
  const filterMap = filterMapComposition(F, G);
  return [filterMap(self, a => Either.getLeft(f(a))), filterMap(self, a => Either.getRight(f(a)))];
};
/**
 * Returns a default binary `filterMap` composition.
 *
 * @since 0.24.0
 */
exports.partitionMapComposition = partitionMapComposition;
const filterMapComposition = (F, G) => (self, f) => F.map(self, G.filterMap(f));
/**
 * @since 0.24.0
 */
exports.filterMapComposition = filterMapComposition;
const compact = F => F.filterMap(_Function.identity);
/**
 * @since 0.24.0
 */
exports.compact = compact;
const separate = F => F.partitionMap(_Function.identity);
/**
 * @since 0.24.0
 */
exports.separate = separate;
const filter = Filterable => (0, _Function.dual)(2, (self, predicate) => Filterable.filterMap(self, b => predicate(b) ? Option.some(b) : Option.none()));
/**
 * @since 0.24.0
 */
exports.filter = filter;
const partition = F => (0, _Function.dual)(2, (self, predicate) => F.partitionMap(self, b => predicate(b) ? Either.right(b) : Either.left(b)));
exports.partition = partition;
//# sourceMappingURL=Filterable.js.map