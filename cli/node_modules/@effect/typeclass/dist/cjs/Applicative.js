"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMonoid = void 0;
var monoid = _interopRequireWildcard(require("./Monoid.js"));
var semiApplicative = _interopRequireWildcard(require("./SemiApplicative.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Lift a `Monoid` into `F`, combining the inner values using the provided `Monoid`:
 *
 * - `combine` is provided by {@link semiApplicative.getSemigroup}.
 * - `empty` is `F.of(M.empty)`
 *
 * @since 0.24.0
 */
const getMonoid = F => M => monoid.fromSemigroup(semiApplicative.getSemigroup(F)(M), F.of(M.empty));
exports.getMonoid = getMonoid;
//# sourceMappingURL=Applicative.js.map