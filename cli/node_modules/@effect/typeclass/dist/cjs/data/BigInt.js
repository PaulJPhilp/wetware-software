"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SemigroupSum = exports.SemigroupMultiply = exports.SemigroupMin = exports.SemigroupMax = exports.MonoidSum = exports.MonoidMultiply = void 0;
var _BigInt = require("effect/BigInt");
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 0.24.0
 */

/**
 * `bigint` semigroup under addition.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupSum } from "@effect/typeclass/data/BigInt"
 *
 * console.log(SemigroupSum.combine(2n, 3n))
 * // 5n
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupSum = exports.SemigroupSum = /*#__PURE__*/semigroup.make((self, that) => self + that);
/**
 * `bigint` semigroup under multiplication.
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMultiply = exports.SemigroupMultiply = /*#__PURE__*/semigroup.make((self, that) => self * that, (self, collection) => {
  if (self === 0n) {
    return 0n;
  }
  let out = self;
  for (const n of collection) {
    if (n === 0n) {
      return 0n;
    }
    out = out * n;
  }
  return out;
});
/**
 * A `Semigroup` that uses the minimum between two values.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupMin } from "@effect/typeclass/data/BigInt"
 *
 * console.log(SemigroupMin.combine(2n, 3n))
 * // 2n
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMin = exports.SemigroupMin = /*#__PURE__*/semigroup.min(_BigInt.Order);
/**
 * A `Semigroup` that uses the maximum between two values.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupMax } from "@effect/typeclass/data/BigInt"
 *
 * console.log(SemigroupMax.combine(2n, 3n))
 * // 3n
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupMax = exports.SemigroupMax = /*#__PURE__*/semigroup.max(_BigInt.Order);
/**
 * `bigint` monoid under addition.
 *
 * The `empty` value is `0n`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidSum } from "@effect/typeclass/data/BigInt"
 *
 * console.log(MonoidSum.combine(2n, 3n))
 * // 5n
 * console.log(MonoidSum.combine(2n, MonoidSum.empty))
 * // 2n
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidSum = exports.MonoidSum = /*#__PURE__*/monoid.fromSemigroup(SemigroupSum, 0n);
/**
 * `bigint` monoid under multiplication.
 *
 * The `empty` value is `1n`.
 *
 * **Example**
 *
 * ```ts
 * import { MonoidMultiply } from "@effect/typeclass/data/BigInt"
 *
 * console.log(MonoidMultiply.combine(2n, 3n))
 * // 6n
 * console.log(MonoidMultiply.combine(2n, MonoidMultiply.empty))
 * // 2n
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidMultiply = exports.MonoidMultiply = /*#__PURE__*/monoid.fromSemigroup(SemigroupMultiply, 1n);
//# sourceMappingURL=BigInt.js.map