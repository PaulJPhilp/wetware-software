"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SemigroupXor = exports.SemigroupSome = exports.SemigroupEvery = exports.SemigroupEqv = exports.MonoidXor = exports.MonoidSome = exports.MonoidEvery = exports.MonoidEqv = void 0;
var monoid = _interopRequireWildcard(require("../Monoid.js"));
var semigroup = _interopRequireWildcard(require("../Semigroup.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 0.24.0
 */

/**
 * `boolean` semigroup under conjunction.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupEvery } from "@effect/typeclass/data/Boolean"
 *
 * console.log(SemigroupEvery.combine(true, true))
 * // true
 * console.log(SemigroupEvery.combine(true, false))
 * // false
 * console.log(SemigroupEvery.combine(false, true))
 * // false
 * console.log(SemigroupEvery.combine(false, false))
 * // false
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupEvery = exports.SemigroupEvery = /*#__PURE__*/semigroup.make((self, that) => self && that, (self, collection) => {
  if (self === false) {
    return false;
  }
  for (const b of collection) {
    if (b === false) {
      return false;
    }
  }
  return true;
});
/**
 * `boolean` semigroup under disjunction.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupSome } from "@effect/typeclass/data/Boolean"
 *
 * console.log(SemigroupSome.combine(true, true))
 * // true
 * console.log(SemigroupSome.combine(true, false))
 * // true
 * console.log(SemigroupSome.combine(false, true))
 * // true
 * console.log(SemigroupSome.combine(false, false))
 * // false
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupSome = exports.SemigroupSome = /*#__PURE__*/semigroup.make((self, that) => self || that, (self, collection) => {
  if (self === true) {
    return true;
  }
  for (const b of collection) {
    if (b === true) {
      return true;
    }
  }
  return false;
});
/**
 * `boolean` semigroup under exclusive disjunction.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupXor } from "@effect/typeclass/data/Boolean"
 *
 * console.log(SemigroupXor.combine(true, true))
 * // false
 * console.log(SemigroupXor.combine(true, false))
 * // true
 * console.log(SemigroupXor.combine(false, true))
 * // true
 * console.log(SemigroupXor.combine(false, false))
 * // false
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupXor = exports.SemigroupXor = /*#__PURE__*/semigroup.make((self, that) => self !== that);
/**
 * `boolean` semigroup under equivalence.
 *
 * **Example**
 *
 * ```ts
 * import { SemigroupEqv } from "@effect/typeclass/data/Boolean"
 *
 * console.log(SemigroupEqv.combine(true, true))
 * // true
 * console.log(SemigroupEqv.combine(true, false))
 * // false
 * console.log(SemigroupEqv.combine(false, true))
 * // false
 * console.log(SemigroupEqv.combine(false, false))
 * // true
 * ```
 *
 * @category instances
 * @since 0.24.0
 */
const SemigroupEqv = exports.SemigroupEqv = /*#__PURE__*/semigroup.make((self, that) => self === that);
/**
 * `boolean` monoid under conjunction, see also {@link SemigroupEvery}.
 *
 * The `empty` value is `true`.
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidEvery = exports.MonoidEvery = /*#__PURE__*/monoid.fromSemigroup(SemigroupEvery, true);
/**
 * `boolean` monoid under disjunction, see also {@link SemigroupSome}.
 *
 * The `empty` value is `false`.
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidSome = exports.MonoidSome = /*#__PURE__*/monoid.fromSemigroup(SemigroupSome, false);
/**
 * `boolean` monoid under exclusive disjunction, see also {@link SemigroupXor}.
 *
 * The `empty` value is `false`.
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidXor = exports.MonoidXor = /*#__PURE__*/monoid.fromSemigroup(SemigroupXor, false);
/**
 * `boolean` monoid under equivalence.
 *
 * The `empty` value is `true`.
 *
 * @category instances
 * @since 0.24.0
 */
const MonoidEqv = exports.MonoidEqv = /*#__PURE__*/monoid.fromSemigroup(SemigroupEqv, true);
//# sourceMappingURL=Boolean.js.map