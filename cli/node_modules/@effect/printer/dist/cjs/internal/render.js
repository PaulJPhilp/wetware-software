"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderStream = exports.render = void 0;
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Function = require("effect/Function");
var layout = _interopRequireWildcard(require("./layout.js"));
var pageWidth = _interopRequireWildcard(require("./pageWidth.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// -----------------------------------------------------------------------------
// Rendering Algorithms
// -----------------------------------------------------------------------------
/** @internal */
const render = exports.render = /*#__PURE__*/(0, _Function.dual)(2, (self, config) => {
  switch (config.style) {
    case "compact":
      {
        return renderStream(layout.compact(self));
      }
    case "pretty":
      {
        const width = Object.assign({}, pageWidth.defaultPageWidth, config.options);
        return renderStream(layout.pretty(self, layout.options(width)));
      }
    case "smart":
      {
        const width = Object.assign({}, pageWidth.defaultPageWidth, config.options);
        return renderStream(layout.smart(self, layout.options(width)));
      }
  }
});
/** @internal */
const renderStream = self => Effect.runSync(renderSafe(self));
exports.renderStream = renderStream;
const renderSafe = self => {
  switch (self._tag) {
    case "FailedStream":
      {
        throw new Error("bug, we ended up with a failed in render!");
      }
    case "EmptyStream":
      {
        return Effect.succeed("");
      }
    case "CharStream":
      {
        return Effect.map(Effect.suspend(() => renderSafe(self.stream)), rest => self.char + rest);
      }
    case "TextStream":
      {
        return Effect.map(Effect.suspend(() => renderSafe(self.stream)), rest => self.text + rest);
      }
    case "LineStream":
      {
        let indent = "\n";
        for (let i = 0; i < self.indentation; i++) {
          indent = indent += " ";
        }
        return Effect.map(Effect.suspend(() => renderSafe(self.stream)), rest => indent + rest);
      }
    case "PopAnnotationStream":
    case "PushAnnotationStream":
      {
        return Effect.suspend(() => renderSafe(self.stream));
      }
  }
};
//# sourceMappingURL=render.js.map