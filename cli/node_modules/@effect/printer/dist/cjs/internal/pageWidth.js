"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unbounded = exports.remainingWidth = exports.isUnbounded = exports.isPageWidth = exports.isAvailablePerLine = exports.defaultPageWidth = exports.availablePerLine = exports.PageWidthTypeId = void 0;
var Equal = _interopRequireWildcard(require("effect/Equal"));
var _Function = require("effect/Function");
var Hash = _interopRequireWildcard(require("effect/Hash"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
const PageWidthSymbolKey = "@effect/printer/PageWidth";
/** @internal */
const PageWidthTypeId = exports.PageWidthTypeId = /*#__PURE__*/Symbol.for(PageWidthSymbolKey);
const protoHash = {
  AvailablePerLine: self => (0, _Function.pipe)(Hash.hash("@effect/printer/PageWidth/AvailablePerLine"), Hash.combine(Hash.hash(PageWidthSymbolKey)), Hash.combine(Hash.hash(self.lineWidth)), Hash.combine(Hash.hash(self.ribbonFraction))),
  Unbounded: _ => (0, _Function.pipe)(Hash.hash("@effect/printer/PageWidth/Unbounded"), Hash.combine(Hash.hash(PageWidthSymbolKey)))
};
const protoEqual = {
  AvailablePerLine: (self, that) => isPageWidth(that) && that._tag === "AvailablePerLine" && self.lineWidth === that.lineWidth && self.ribbonFraction === that.ribbonFraction,
  Unbounded: (self, that) => isPageWidth(that) && that._tag === "Unbounded"
};
const proto = {
  [PageWidthTypeId]: PageWidthTypeId,
  [Hash.symbol]() {
    return Hash.cached(this, protoHash[this._tag](this));
  },
  [Equal.symbol](that) {
    return protoEqual[this._tag](this, that);
  }
};
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/** @internal */
const isPageWidth = u => typeof u === "object" && u != null && PageWidthTypeId in u;
/** @internal */
exports.isPageWidth = isPageWidth;
const isAvailablePerLine = self => self._tag === "AvailablePerLine";
/** @internal */
exports.isAvailablePerLine = isAvailablePerLine;
const isUnbounded = self => self._tag === "AvailablePerLine";
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/** @internal */
exports.isUnbounded = isUnbounded;
const availablePerLine = (lineWidth, ribbonFraction) => {
  const op = Object.create(proto);
  op._tag = "AvailablePerLine";
  op.lineWidth = lineWidth;
  op.ribbonFraction = ribbonFraction;
  return op;
};
/** @internal */
exports.availablePerLine = availablePerLine;
const unbounded = exports.unbounded = /*#__PURE__*/(() => {
  const op = /*#__PURE__*/Object.create(proto);
  op._tag = "Unbounded";
  return op;
})();
/** @internal */
const defaultPageWidth = exports.defaultPageWidth = /*#__PURE__*/availablePerLine(80, 1);
// -----------------------------------------------------------------------------
// Utilities
// -----------------------------------------------------------------------------
/** @internal */
const remainingWidth = (pageWidth, ribbonFraction, indentation, currentColumn) => {
  const columnsLeftInLine = pageWidth - currentColumn;
  const ribbonWidth = Math.max(0, Math.min(pageWidth, Math.floor(pageWidth * ribbonFraction)));
  const columnsLeftInRibbon = indentation + ribbonWidth - currentColumn;
  return Math.min(columnsLeftInLine, columnsLeftInRibbon);
};
exports.remainingWidth = remainingWidth;
//# sourceMappingURL=pageWidth.js.map