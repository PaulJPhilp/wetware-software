"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optimize = exports.Shallow = exports.Deep = void 0;
var internal = _interopRequireWildcard(require("./internal/optimize.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category instances
 */
const Shallow = exports.Shallow = {
  _tag: "Shallow"
};
/**
 * @since 1.0.0
 * @category instances
 */
const Deep = exports.Deep = {
  _tag: "Deep"
};
// -----------------------------------------------------------------------------
// Optimization
// -----------------------------------------------------------------------------
/**
 * The `optimize` function will combine text nodes so that they can be rendered
 * more efficiently. An optimized document is always laid out in an identical
 * manner to its un-optimized counterpart.
 *
 * When laying a `Doc` out to a `SimpleDocStream`, every component of the input
 * document is translated directly to the simpler output format. This sometimes
 * yields undesirable chunking when many pieces have been concatenated together.
 *
 * It is therefore a good idea to run `fuse` on concatenations of lots of small
 * strings that are used many times.
 *
 * @example
 * ```ts
 * import * as Doc from "@effect/printer/Doc"
 * import * as Optimize from "@effect/printer/Optimize"
 *
 * // The document below contains a chain of four entries in the output `DocStream`
 * const inefficient = Doc.hsep([
 *   Doc.char("a"),
 *   Doc.char("b"),
 *   Doc.char("c"),
 *   Doc.char("d")
 * ])
 *
 * // However, the above document is fully equivalent to the tightly packed
 * // document below which is only a single entry in the output `DocStream` and
 * // can be processed much more efficiently.
 * const efficient = Doc.text("abcd")
 *
 * // We can optimize the `inefficient` document using `Optimize`
 * Optimize.optimize(Optimize.Deep)(inefficient)
 * ```
 *
 * @since 1.0.0
 * @category optimization
 */
const optimize = exports.optimize = internal.optimize;
//# sourceMappingURL=Optimize.js.map