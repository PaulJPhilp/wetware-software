"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.levensteinDistance = void 0;
var cliConfig = _interopRequireWildcard(require("./cliConfig.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @internal */
const levensteinDistance = (first, second, config) => {
  if (first.length === 0 && second.length === 0) {
    return 0;
  }
  if (first.length === 0) {
    return second.length;
  }
  if (second.length === 0) {
    return first.length;
  }
  const rowCount = first.length;
  const columnCount = second.length;
  const matrix = new Array(rowCount);
  const normalFirst = cliConfig.normalizeCase(config, first);
  const normalSecond = cliConfig.normalizeCase(config, second);
  // Increment each row in the first column
  for (let x = 0; x <= rowCount; x++) {
    matrix[x] = new Array(columnCount);
    matrix[x][0] = x;
  }
  // Increment each column in the first row
  for (let y = 0; y <= columnCount; y++) {
    matrix[0][y] = y;
  }
  // Fill in the rest of the matrix
  for (let row = 1; row <= rowCount; row++) {
    for (let col = 1; col <= columnCount; col++) {
      const cost = normalFirst.charAt(row - 1) === normalSecond.charAt(col - 1) ? 0 : 1;
      matrix[row][col] = Math.min(matrix[row][col - 1] + 1, Math.min(matrix[row - 1][col] + 1, matrix[row - 1][col - 1] + cost));
    }
  }
  return matrix[rowCount][columnCount];
};
exports.levensteinDistance = levensteinDistance;
//# sourceMappingURL=autoCorrect.js.map